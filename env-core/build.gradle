/*
 *
 * Copyright 2018 Pavel Drankou.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'maven-publish'
  id 'signing'
}

dependencies {

  // byte code engineering
  compile group: 'org.javassist', name: 'javassist', version: '3.25.0-GA'
  
  // Vert.X dependencies
  compile group: 'io.vertx', name: 'vertx-core', version: vertx_version
  compile group: 'io.vertx', name: 'vertx-web', version: vertx_version
  compile group: 'io.vertx', name: 'vertx-web-client', version: vertx_version

  // Logging
  compile group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version

  // Testing
  testCompile group: 'junit', name: 'junit', version: junit_version
  testCompile group: 'io.vertx', name: 'vertx-unit', version: vertx_version
  testCompile group: 'ch.qos.logback', name: 'logback-classic', version: logback_version
}

// _______________________________
// Custom tasks
task packageTests(type: Jar) {
  archiveBaseName = project.name + '-test-fat'
  from configurations.testCompile.collect { it.isDirectory() ? it : zipTree(it) }
  from sourceSets.test.output
  from sourceSets.main.output
  from 'src/main/resources/run_virus.sh'

  // in order to omit version in resulted file name
  version = null
}

task printLogs() {
  doLast {
    println 'printing log files:'
    def tree = fileTree(dir: '.avtenv', include: '**/*.txt')
    tree.each { File file ->
      println file.getAbsolutePath() + ":"
      println file.getText()
    }
  }
}

task sourcesJar(type: Jar) {
  classifier "sources"
  from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier "javadoc"
  from javadoc.destinationDir
}

// Task dependencies
tasks.test.dependsOn(packageTests)

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = 'env-core'
      from components.java
      artifact sourcesJar
      artifact javadocJar
      pom {
        name = 'env'
        description = 'Artificial environment for epidemic virus spreading'
        url = 'https://github.com/artificial-vulnerability-tools/env'
        organization {
          name = 'io.github.artificial-vulnerability-tools'
          url = 'https://github.com/artificial-vulnerability-tools'
        }
        issueManagement {
          system = 'GitHub'
          url = 'https://github.com/artificial-vulnerability-tools/env/issues'
        }
        licenses {
          license {
            name = 'Apache License 2.0'
            url = 'https://github.com/artificial-vulnerability-tools/env/blob/master/LICENSE'
            distribution = 'repo'
          }
        }
        scm {
          url = 'https://github.com/artificial-vulnerability-tools/env'
          connection = 'scm:git:git://github.com/artificial-vulnerability-tools/env.git'
          developerConnection = 'scm:git:ssh://git@github.com:artificial-vulnerability-tools/env.git'
        }
        developers {
          developer {
            name = 'Pavel Drankou'
          }
        }
      }
    }
  }

  if (!project.hasProperty("sonatypeUsername")) {
    ext.sonatypeUsername = "RandomUsername"
  }
  if (!project.hasProperty("sonatypePassword")) {
    ext.sonatypePassword = "RandomPassword"
  }
  repositories {
    maven {
      // change URLs to point to your repos, e.g. http://my.org/repo
      def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
      def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials {
        username sonatypeUsername
        password sonatypePassword
      }
    }
  }
}
